{
  "remoteServices": {
    "baseUrl": {
      "/numRegister": {
        "description": "Operations on numeric registers of the Fanuc Controller",
        "paths": {
          "/single": {
            "description": "Operations on one numeric register",
            "globalUrl": "/numRegister/single",
            "methods": {
              "GET": {
                "description": "Read one numeric register",
                "globalUrl": "/numRegister/single?reg=<register>&type=<value_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "reg",
                      "description": "id of register to read",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "type",
                      "description": "type of value reads",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "int",
                        "float"
                      ]
                    }
                  ],
                  "validationSchema": "numRegSingleQueryParameter"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "int": "getIntRegisterSingle",
                    "float": "getRealRegisterSingle"
                  }
                }
              },
              "PUT": {
                "description": "Write one numeric register",
                "globalUrl": "/numRegister/single?reg=<register>&type=<value_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "reg",
                      "description": "id of register to write",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "type",
                      "description": "type of value to write",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "int",
                        "float"
                      ]
                    }
                  ],
                  "validationSchema": "numRegSingleQueryParameter"
                },
                "body": {
                  "parameters": [
                    {
                      "name": "value",
                      "description": "32 bytes number to write on register",
                      "type": "number",
                      "warnings": [
                        "number must be in unsigned 32 bytes number range"
                      ],
                      "optional": false
                    }
                  ],
                  "validationSchema": "numRegBody"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "int": "setIntRegisterSingle",
                    "float": "setRealRegisterSingle"
                  }
                }
              }
            }
          },
          "/block": {
            "description": "Operations on several numeric register",
            "globalUrl": "/numRegister/block",
            "methods": {
              "GET": {
                "description": "Read several numeric registers",
                "globalUrl": "/numRegister/block?startReg=<register>&blokSize=<nbr_of_register>&type=<value_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "startReg",
                      "description": "id of first register to read",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "blockSize",
                      "description": "number of register to read",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "type",
                      "description": "type of values read",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "int",
                        "float"
                      ]
                    }
                  ],
                  "validationSchema": "numRegBlockQueryParameter"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "int": "getIntRegisterBlock",
                    "float": "getRealRegisterBlock"
                  }
                }
              },
              "PUT": {
                "description": "Write several numeric registers",
                "globalUrl": "/numRegister/block?reg=<register>&blockSize=<nbr_of_register>&type=<value_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "startReg",
                      "description": "id of first register to write",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "blockSize",
                      "description": "number of register to write",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "type",
                      "description": "type of values write",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "int",
                        "float"
                      ]
                    }
                  ],
                  "validationSchema": "numRegBlockQueryParameter"
                },
                "body": {
                  "parameters": [
                    {
                      "name": "values",
                      "type": "number[]",
                      "description": "list of 32 bytes numbers to write",
                      "warnings": [
                        "numbers must be in unsigned 32 bytes number range according the type (int or float)",
                        "list size must be equal to query blockSize parameter"
                      ],
                      "optional": false
                    }
                  ],
                  "validationSchema": "multipleNumRegBody"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "int": "setIntRegisterBlock",
                    "float": "setRealRegisterBlock"
                  }
                }
              }
            }
          },
          "/all": {
            "description": "Operations on all numeric register",
            "globalUrl": "/numRegister/all",
            "methods": {
              "GET": {
                "description": "Read all numeric registers",
                "globalUrl": "/numRegister/all?type=<value_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "type",
                      "description": "type of value reads",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "int",
                        "float"
                      ]
                    }
                  ],
                  "validationSchema": "numRegAllQueryParameter"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "int": "getIntRegisterAll",
                    "float": "getRealRegisterAll"
                  }
                }
              },
              "PUT": {
                "description": "Write all numeric register",
                "globalUrl": "/numRegister/all?type=<value_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "type",
                      "description": "type of value to write",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "int",
                        "float"
                      ]
                    }
                  ],
                  "validationSchema": "numRegAllQueryParameter"
                },
                "body": {
                  "parameters": [
                    {
                      "name": "values",
                      "description": "list of 32 bytes numbers to write on registers",
                      "type": "number[]",
                      "warnings": [
                        "numbers must be in the unsigned 32 bytes number range according the type (int or float)",
                        "list size must be equal to the number of numeric registers available"
                      ],
                      "optional": false
                    }
                  ],
                  "validationSchema": "multipleNumRegBody"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "int": "setIntRegisterAll",
                    "float": "setRealRegisterAll"
                  }
                }
              }
            }
          }
        }
      },
      "/stringRegister": {
        "description": "Operations on string registers of the Fanuc Controller",
        "paths": {
          "/single": {
            "description": "Operations on one string register",
            "globalUrl": "/stringRegister/single",
            "methods": {
              "GET": {
                "description": "Read one string register",
                "globalUrl": "/stringRegister/single?reg=<register>",
                "query": {
                  "parameters": [
                    {
                      "name": "reg",
                      "description": "id of register to read",
                      "type": "integer",
                      "optional": false
                    }
                  ],
                  "validationSchema": "stringRegSingleQueryParameter"
                },
                "targetRemoteService": {
                  "remoteService": "getStringRegisterSingle"
                }
              },
              "PUT": {
                "description": "Write one string register",
                "globalUrl": "/stringRegister/single?reg=<register>",
                "query": {
                  "parameters": [
                    {
                      "name": "reg",
                      "description": "id of register to write",
                      "type": "integer",
                      "optional": false
                    }
                  ],
                  "validationSchema": "stringRegSingleQueryParameter"
                },
                "body": {
                  "parameters": [
                    {
                      "name": "text",
                      "description": "text to write in the string register",
                      "type": "string",
                      "warnings": [
                        "string lenght must be lower than or equal to 82 characters"
                      ],
                      "optional": false
                    }
                  ],
                  "validationSchema": "stringRegBody"
                },
                "targetRemoteService": {
                  "remoteService": "setStringRegisterSingle"
                }
              }
            }
          },
          "/block": {
            "description": "Operations on several string register",
            "globalUrl": "/stringRegister/block",
            "methods": {
              "GET": {
                "description": "Read several string registers",
                "globalUrl": "/stringRegister/block?startReg=<register>&blokSize=<nbr_of_register>",
                "query": {
                  "parameters": [
                    {
                      "name": "startReg",
                      "description": "id of first register to read",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "blockSize",
                      "description": "number of register to read",
                      "type": "integer",
                      "optional": false
                    }
                  ],
                  "validationSchema": "stringRegBlockQueryParameter"
                },
                "targetRemoteService": {
                  "remoteService": "getStringRegisterBlock"
                }
              },
              "PUT": {
                "description": "Write several string registers",
                "globalUrl": "/stringRegister/single?reg=<register>&blockSize=<nbr_of_register>",
                "query": {
                  "parameters": [
                    {
                      "name": "startReg",
                      "description": "id of first register to write",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "blockSize",
                      "description": "number of register to write",
                      "type": "integer",
                      "optional": false
                    }
                  ],
                  "validationSchema": "stringRegSingleQueryParameter"
                },
                "body": {
                  "parameters": [
                    {
                      "name": "texts",
                      "description": "list of texts to write in the string registers",
                      "type": "string[]",
                      "warnings": [
                        "each strings of the list must be lower than or equal to 82 characters lenght",
                        "the list size must be equal to the block size"
                      ],
                      "optional": false
                    }
                  ],
                  "validationSchema": "multipleStringRegBody"
                },
                "targetRemoteService": {
                  "remoteService": "setStringRegisterBlock"
                }
              }
            }
          },
          "/all": {
            "description": "Operations on all string registers",
            "globalUrl": "/stringRegister/all",
            "methods": {
              "GET": {
                "description": "Read all string registers",
                "globalUrl": "/stringRegister/all",
                "targetRemoteService": {
                  "remoteService": "getStringRegisterAll"
                }
              },
              "PUT": {
                "description": "Write all string registers",
                "globalUrl": "/stringRegister/all",
                "body": {
                  "parameters": [
                    {
                      "name": "values",
                      "description": "list of texts to write in the string registers",
                      "type": "string[]",
                      "warnings": [
                        "each strings of the list must be lower than or equal to 82 characters lenght",
                        "the list size must be equal to the number of string registers available"
                      ],
                      "optional": false
                    }
                  ],
                  "validationSchema": "multipleStringRegBody"
                },
                "targetRemoteService": {
                  "remoteService": "setStringRegisterAll"
                }
              }
            }
          }
        }
      },
      "/positionRegister": {
        "description": "Operations on position registers of the Fanuc Controller",
        "paths": {
          "/single": {
            "description": "Operations on one position register",
            "globalUrl": "/positionRegister/single",
            "methods": {
              "GET": {
                "description": "Read one position register",
                "globalUrl": "/positionRegister/single?reg=<register>&type=<position_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "reg",
                      "description": "id of register to read",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "type",
                      "description": "type of position",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "crt",
                        "jnt"
                      ]
                    }
                  ],
                  "validationSchema": "posRegSingleQueryParameter"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "jnt": "getJntPositionRegisterSingle",
                    "crt": "getCrtPositionRegisterSingle"
                  }
                }
              },
              "PUT": {
                "description": "Write one position register",
                "globalUrl": "/positionRegister/single?reg=<register>&type=<value_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "reg",
                      "description": "id of register to write",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "type",
                      "description": "type of position value to write",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "crt",
                        "jnt"
                      ]
                    }
                  ],
                  "validationSchema": "posRegSingleQueryParameter"
                },
                "body": {
                  "parameters": [
                    {
                      "name": "ut",
                      "description": "user tool number",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "uf",
                      "description": "user frame number",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "point",
                      "description": "object describing the point to write",
                      "type": "Point",
                      "optional": false
                    }
                  ],
                  "validationSchema": "posRegBody"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "crt": "setCrtPositionRegisterSingle",
                    "jnt": "setJntPositionRegisterSingle"
                  }
                }
              }
            }
          },
          "/block": {
            "description": "Operations on several position register",
            "globalUrl": "/positionRegister/block",
            "methods": {
              "GET": {
                "description": "Read several position registers",
                "globalUrl": "/positionRegister/block?startReg=<register>&blokSize=<nbr_of_register>&type=<value_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "startReg",
                      "description": "id of first register to read",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "blockSize",
                      "description": "number of register to read",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "type",
                      "description": "type of position to read",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "crt",
                        "jnt"
                      ]
                    }
                  ],
                  "validationSchema": "posRegBlockQueryParameter"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "crt": "getCrtPositionRegisterBlock",
                    "jnt": "getJntPositionRegisterBlock"
                  }
                }
              },
              "PUT": {
                "description": "Write several position registers",
                "globalUrl": "/positionRegister/block?reg=<register>&blockSize=<nbr_of_register>&type=<value_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "startReg",
                      "description": "id of first register to write",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "blockSize",
                      "description": "number of register to write",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "type",
                      "description": "type of position to write",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "crt",
                        "jnt"
                      ]
                    }
                  ],
                  "validationSchema": "posRegBlockQueryParameter"
                },
                "body": {
                  "parameters": [
                    {
                      "name": "ut",
                      "description": "user tool number",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "uf",
                      "description": "user frame number",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "points",
                      "description": "array of objects describing points to write",
                      "type": "Point[]",
                      "optional": false
                    }
                  ],
                  "validationSchema": "multiplePosRegRegister"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "crt": "setCrtPositionRegisterBlock",
                    "jnt": "setJntPositionRegisterBlock"
                  }
                }
              }
            }
          },
          "/all": {
            "description": "Operations on all position registers",
            "globalUrl": "/positionRegister/all",
            "methods": {
              "GET": {
                "description": "Read all position registers",
                "globalUrl": "/positionRegister/all?type=<position_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "type",
                      "description": "type of value reads",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "crt",
                        "jnt"
                      ]
                    }
                  ],
                  "validationSchema": "posRegAllQueryParameter"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "crt": "getCrtPositionRegisterAll",
                    "jnt": "getJntPositionRegisterAll"
                  }
                }
              },
              "PUT": {
                "description": "Write all position registesr",
                "globalUrl": "/positionRegister/all?type=<position_type>",
                "query": {
                  "parameters": [
                    {
                      "name": "type",
                      "description": "type of value to write",
                      "type": "string",
                      "optional": false,
                      "enum": [
                        "crt",
                        "jnt"
                      ]
                    }
                  ],
                  "validationSchema": "posRegAllQueryParameter"
                },
                "body": {
                  "parameters": [
                    {
                      "name": "ut",
                      "description": "user tool number",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "uf",
                      "description": "user frame number",
                      "type": "integer",
                      "optional": false
                    },
                    {
                      "name": "points",
                      "description": "array of objects describing points to write",
                      "type": "Point[]",
                      "optional": false
                    }
                  ],
                  "validationSchema": "multiplePosRegRegister"
                },
                "targetRemoteService": {
                  "conditions": [
                    "type"
                  ],
                  "remoteService": {
                    "crt": "setCrtPositionRegisterAll",
                    "jnt": "setJntPositionRegisterAll"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "targetProtocol": {
    "name": "enip",
    "remoteServices": {
      "getIntNumRegisterBlock": {
        "class": "0x6b",
        "instance": {
          "size": 2,
          "value": [
            "{{blkSize}}",
            1
          ]
        },
        "attribute": "{{startReg}}",
        "service": "GET_ATTR_BLOCK"
      },
      "getIntNumRegisterSingle": {
        "class": "0x6b",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": "{{reg}}",
        "service": "GET_ATTR_SINGLE"
      },
      "getIntNumRegisterAll": {
        "class": "0x6b",
        "instance": {
          "size": 1,
          "value": 1
        },
        "service": "GET_ATTR_ALL"
      },
      "getRealNumRegisterBlock": {
        "class": "0x6c",
        "instance": {
          "size": 2,
          "value": [
            "{{blkSize}}",
            1
          ]
        },
        "attribute": "{{startReg}}",
        "service": "GET_ATTR_BLOCK"
      },
      "getRealNumRegisterSingle": {
        "class": "0x6c",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": "{{reg}}",
        "service": "GET_ATTR_SINGLE"
      },
      "getRealNumRegisterAll": {
        "class": "0x6c",
        "instance": {
          "size": 1,
          "value": 1
        },
        "service": "GET_ATTR_ALL"
      },
      "getStringRegisterBlock": {
        "class": "0x6d",
        "instance": {
          "size": 2,
          "value": [
            "{{blkSize}}",
            1
          ]
        },
        "attribute": "{{startReg}}",
        "service": "GET_ATTR_BLOCK"
      },
      "getStringRegisterSingle": {
        "class": "0x6d",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": "{{reg}}",
        "service": "GET_ATTR_SINGLE"
      },
      "getStringRegisterAll": {
        "class": "0x6d",
        "instance": {
          "size": 1,
          "value": 1
        },
        "service": "GET_ATTR_ALL"
      },
      "getCrtPositionRegisterBlock": {
        "class": "0x7b",
        "instance": {
          "size": 2,
          "value": [
            "{{blkSize}}",
            1
          ]
        },
        "attribute": "{{startReg}}",
        "service": "GET_ATTR_BLOCK"
      },
      "getCrtPositionRegisterSingle": {
        "class": "0x7b",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": "{{reg}}",
        "service": "GET_ATTR_SINGLE"
      },
      "getCrtPositionRegisterAll": {
        "class": "0x7b",
        "instance": {
          "size": 1,
          "value": 1
        },
        "service": "GET_ATTR_ALL"
      },
      "getJntPositionRegisterBlock": {
        "class": "0x7c",
        "instance": {
          "size": 2,
          "value": [
            "{{blkSize}}",
            1
          ]
        },
        "attribute": "{{startReg}}",
        "service": "GET_ATTR_BLOCK"
      },
      "getJntPositionRegisterSingle": {
        "class": "0x7c",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": "{{reg}}",
        "service": "GET_ATTR_SINGLE"
      },
      "getJntPositionRegisterAll": {
        "class": "0x7c",
        "instance": {
          "size": 1,
          "value": 1
        },
        "service": "GET_ATTR_ALL"
      },
      "getCrtCurrentPosition": {
        "class": "0x7d",
        "service": "GET_ATTR_SINGLE",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": 1
      },
      "getJntCurrentPosition": {
        "class": "0x7e",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": 1,
        "service": "GET_ATTR_SINGLE"
      },
      "setIntNumRegisterBlock": {
        "class": "0x6b",
        "instance": {
          "size": 2,
          "value": [
            "{{blkSize}}",
            1
          ]
        },
        "attribute": "{{startReg}}",
        "service": "SET_ATTR_BLOCK"
      },
      "setIntNumRegisterSingle": {
        "class": "0x6b",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": "{{reg}}",
        "service": "SET_ATTR_SINGLE"
      },
      "setIntNumRegisterAll": {
        "class": "0x6b",
        "instance": {
          "size": 1,
          "value": 1
        },
        "service": "SET_ATTR_ALL"
      },
      "setRealNumRegisterBlock": {
        "class": "0x6c",
        "instance": {
          "size": 2,
          "value": [
            "{{blkSize}}",
            1
          ]
        },
        "attribute": "{{startReg}}",
        "service": "SET_ATTR_BLOCK"
      },
      "setRealNumRegisterSingle": {
        "class": "0x6c",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": "{{reg}}",
        "service": "SET_ATTR_SINGLE"
      },
      "setRealNumRegisterAll": {
        "class": "0x6c",
        "instance": {
          "size": 1,
          "value": 1
        },
        "service": "SET_ATTR_ALL"
      },
      "setStringRegisterBlock": {
        "class": "0x6d",
        "instance": {
          "size": 2,
          "value": [
            "{{blkSize}}",
            1
          ]
        },
        "attribute": "{{startReg}}",
        "service": "SET_ATTR_BLOCK"
      },
      "setStringRegisterSingle": {
        "class": "0x6d",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": "{{reg}}",
        "service": "SET_ATTR_SINGLE"
      },
      "setStringRegisterAll": {
        "class": "0x6d",
        "instance": {
          "size": 1,
          "value": 1
        },
        "service": "SET_ATTR_ALL"
      },
      "setCrtPositionRegisterBlock": {
        "class": "0x7b",
        "instance": {
          "size": 2,
          "value": [
            "{{blkSize}}",
            1
          ]
        },
        "attribute": "{{startReg}}",
        "service": "SET_ATTR_BLOCK"
      },
      "setCrtPositionRegisterSingle": {
        "class": "0x7b",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": "{{reg}}",
        "service": "SET_ATTR_SINGLE"
      },
      "setCrtPositionRegisterAll": {
        "class": "0x7b",
        "instance": {
          "size": 1,
          "value": 1
        },
        "service": "SET_ATTR_ALL"
      },
      "setJntPositionRegisterBlock": {
        "class": "0x7c",
        "instance": {
          "size": 2,
          "value": [
            "{{blkSize}}",
            1
          ]
        },
        "attribute": "{{startReg}}",
        "service": "SET_ATTR_BLOCK"
      },
      "setJntPositionRegisterSingle": {
        "class": "0x7c",
        "instance": {
          "size": 1,
          "value": 1
        },
        "attribute": "{{reg}}",
        "service": "SET_ATTR_SINGLE"
      },
      "setJntPositionRegisterAll": {
        "class": "0x7c",
        "instance": {
          "size": 1,
          "value": 1
        },
        "service": "SET_ATTR_ALL"
      }
    }
  },
  "validationSchemas": {
    "numRegSingleQueryParameter": {
      "$id": "numRegSingleQueryParameter",
      "type": "object",
      "properties": {
        "reg": {
          "type": "integer",
          "minimum": 1,
          "maximum": 200
        },
        "type": {
          "type": "string",
          "enum": [
            "int",
            "float"
          ]
        }
      },
      "required": [
        "type",
        "reg"
      ]
    },
    "numRegAllQueryParameter": {
      "$id": "numRegAllQueryParameter",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "int",
            "float"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "numRegBlockQueryParameter": {
      "$id": "numRegBlockQueryParameter",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "int",
            "float"
          ]
        },
        "startReg": {
          "type": "integer",
          "minimum": 1,
          "maximum": 200
        },
        "blockSize": {
          "type": "integer",
          "minimum": 1,
          "maximum": 200
        }
      },
      "required": [
        "type",
        "blockSize",
        "startReg"
      ]
    },
    "stringRegSingleQueryParameter": {
      "$id": "numRegBlockQueryParameter",
      "properties": {
        "reg": {
          "type": "integer",
          "minimum": 1,
          "maximum": 25
        }
      },
      "required": [
        "reg"
      ]
    },
    "stringRegBlockQueryParameter": {
      "$id": "stringRegBlockQueryParameter",
      "properties": {
        "startReg": {
          "type": "integer",
          "minimum": 1,
          "maximum": 25
        },
        "blockSize": {
          "type": "integer",
          "minimum": 1,
          "maximum": 25
        }
      },
      "required": [
        "startReg",
        "blockSize"
      ]
    },
    "posRegSingleQueryParameter": {
      "$id": "posRegSingleQueryParameter",
      "type": "object",
      "properties": {
        "reg": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        },
        "type": {
          "type": "string",
          "enum": [
            "crt",
            "jnt"
          ]
        }
      },
      "required": [
        "type",
        "reg"
      ]
    },
    "posRegAllQueryParameter": {
      "$id": "posRegAllQueryParameter",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "crt",
            "jnt"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "posRegBlockQueryParameter": {
      "$id": "numRegBlockQueryParameter",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "crt",
            "jnt"
          ]
        },
        "startReg": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        },
        "blockSize": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100
        }
      },
      "required": [
        "type",
        "blockSize",
        "startReg"
      ]
    },
    "posRegBody": {
      "$id": "posRegBody",
      "type": "object",
      "properties": {
        "uf": {
          "type": "integer",
          "minimum": 1
        },
        "ut": {
          "type": "integer",
          "minimum": 1
        },
        "point": {
          "$ref": "posPoint"
        }
      },
      "require": [
        "ut, uf",
        "point"
      ]
    },
    "multiplePosRegBody": {
      "$id": "multiplePosRegBody",
      "type": "object",
      "properties": {
        "uf": {
          "type": "integer",
          "minimum": 1
        },
        "ut": {
          "type": "integer",
          "minimum": 1
        },
        "points": {
          "type": "array",
          "minItems": 1,
          "maxItems": 100,
          "items": {
            "type": {
              "$ref": "posPoint"
            }
          }
        }
      },
      "require": [
        "ut, uf",
        "points"
      ]
    },
    "stringRegBody": {
      "$id": "stringRegBody",
      "type": "object",
      "properties": {
        "text": {
          "$ref": "textRegister"
        }
      },
      "require": [
        "text"
      ]
    },
    "multipleStringRegBody": {
      "$id": "stringRegBody",
      "type": "object",
      "properties": {
        "texts": {
          "type": "array",
          "minItems": 1,
          "maxItems": 25,
          "items": {
            "$ref": "textRegister"
          }
        }
      },
      "require": [
        "texts"
      ]
    },
    "numRegBody": {
      "$id": "numRegBody",
      "type": "object",
      "properties": {
        "value": {
          "type": "number"
        }
      },
      "require": [
        "value"
      ]
    },
    "multipleNumRegBody": {
      "$id": "numRegBody",
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "minItems": 1,
          "maxItems": 200,
          "items": {
            "type": "number"
          }
        }
      },
      "require": [
        "values"
      ]
    },
    "posPoint": {
      "$id": "posPoint",
      "type": "object",
      "properties": {
        "cnt": {
          "type": "integer",
          "minimum": 0,
          "maximum": 100
        },
        "path": {
          "type": "string",
          "enum": [
            "LINEAR",
            "CIRCULAR",
            "JOINT"
          ]
        },
        "position": {
          "$ref": "pointPosition"
        },
        "speed": {
          "type": "integer",
          "maximum": 100,
          "minimum": 0
        }
      },
      "require": [
        "cnt",
        "path",
        "position",
        "speed"
      ]
    },
    "crtPointVector": {
      "$id": "jntVector",
      "type": "object",
      "properties": {
        "p": {
          "type": "number"
        },
        "r": {
          "type": "number"
        },
        "w": {
          "type": "number"
        },
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "z": {
          "type": "number"
        }
      },
      "require": [
        "x",
        "y",
        "z",
        "p",
        "r",
        "w"
      ]
    },
    "jntPointVector": {
      "j1": {
        "type": "number"
      },
      "j2": {
        "type": "number"
      },
      "j3": {
        "type": "number"
      },
      "j4": {
        "type": "number"
      },
      "j5": {
        "type": "number"
      },
      "j6": {
        "type": "number"
      }
    },
    "crtPointConfig": {
      "$id": "crtPointConfig",
      "type": "object",
      "properties": {
        "arm": {
          "type": "string",
          "enum": [
            "TOWARD",
            "BACKWARD"
          ]
        },
        "forearm": {
          "type": "string",
          "enum": [
            "UP",
            "DOWN"
          ]
        },
        "wrist": {
          "type": "string",
          "enum": [
            "FLIP",
            "NOFLIP"
          ]
        },
        "j4": {
          "type": "number"
        },
        "j5": {
          "type": "number"
        },
        "j6": {
          "type": "number"
        }
      },
      "require": [
        "arm",
        "forearm",
        "wrist",
        "j4",
        "j5",
        "j6"
      ]
    },
    "pointPosition": {
      "$id": "crtPointPosition",
      "type": "object",
      "properties": {
        "e1": {
          "type": "number"
        },
        "type": {
          "type": "string",
          "enum": [
            "JOINT",
            "CARTESIAN"
          ]
        }
      },
      "if": {
        "properties": {
          "type": {
            "const": "JOINT"
          }
        }
      },
      "then": {
        "properties": {
          "vector": {
            "$ref": "crtPointVector"
          },
          "config": {
            "$ref": "crtPointConfig"
          }
        }
      },
      "else": {
        "properties": {
          "vector": {
            "$ref": "jntPointVector"
          },
          "config": {
            "const": null
          }
        }
      },
      "require": [
        "config",
        "e1",
        "type",
        "vector"
      ]
    },
    "textRegister": {
      "$id": "textRegister",
      "type": "string",
      "maxLength": 82
    }
  }
}